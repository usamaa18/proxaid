
class CameraApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      displayCamera: false,
      picture: null

    };

    this.frameWidth = "540";
    // change this
    this.postUrl = "http://ptsv2.com/t/0sbyl-1610863008/post";

    this.webcam = null;
    this.toggleCamera = this.toggleCamera.bind(this);
    this.takePicture = this.takePicture.bind(this);
    this.uploadPicture = this.uploadPicture.bind(this);
  }
  toggleCamera() {
    this.setState(prevState => {
      return {
        displayCamera: !prevState.displayCamera,
        picture: null
        }
    })
  }

  takePicture() {
    let video = this.webcam.video;
    let canvas = document.getElementById("canvasHidden");
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    canvas.getContext("2d").drawImage(video, 0, 0);
    // Other browsers will fall back to image/png
    let data = canvas.toDataURL("image/png");
    console.log("Size of image: " + data.length/1000 + " KB");
    this.setState({picture: data}, () => console.log(this.state.picture));


  }

  uploadPicture() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", this.postUrl, true);
    // maybe change content-type to image/png
    xhr.setRequestHeader('Content-Type', 'text/plain');
    const componentRef = this;
    xhr.onreadystatechange = function() {
      if(xhr.readyState === XMLHttpRequest.DONE) {
        var status = xhr.status;
        if (status === 0 || (status >= 200 && status < 400)) {
          // The request has been completed successfully
          console.log("upload complete");
          
          // optional
          let res = xhr.responseText;
          console.log("Number of fingers: " + res);
          let appId = "";
          switch (res) {
            case "1": appId = "btn-door";
                      break;
            case "2": appId = "btn-lights";
                      break;
            case "3": appId = "btn-fan";
                      break;
          }

          if (appId != "") {
            let name = appId.substr(4);
            window.alert(name.charAt(0).toUpperCase() + name.slice(1) + " toggled");
            document.getElementById(appId).click();

          } else {
            window.alert("Not a valid gesture!");
          }

          //componentRef.toggleCamera();
        } else {
          console.log("POST error: " + status);
          // Oh no! There has been an error with the request!
        }
      }
    };
    // TODO: change
    xhr.send("##sdvnsdjkvnadsvna;dkjvn");
    this.toggleCamera();
  }

  componentDidUpdate () {
    if (this.state.displayCamera) {
      ////////////////////
      const videoElement = document.getElementById('webcam');
      const canvasElement = document.getElementById('canvas');
      const canvasCtx = canvasElement.getContext('2d');

      function onResults(results) {
        canvasCtx.save();
        canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
        canvasCtx.drawImage(
            results.image, 0, 0, canvasElement.width, canvasElement.height);
        if (results.multiHandLandmarks) {
          for (const landmarks of results.multiHandLandmarks) {
            drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS,
                          {color: '#00FF00', lineWidth: 5});
            drawLandmarks(canvasCtx, landmarks, {color: '#FF0000', lineWidth: 2});
          }
        }
        canvasCtx.restore();
      }

      const hands = new Hands({locateFile: (file) => {
        return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;
      }});
      hands.setOptions({
        maxNumHands: 2,
        minDetectionConfidence: 0.5,
        minTrackingConfidence: 0.5
      });
      hands.onResults(onResults);

      this.webcam = new Camera(videoElement, {
        onFrame: async () => {
          await hands.send({image: videoElement});
        },
        width: 540,
        height: 304
      });

      console.log(this.webcam);
      this.webcam.start();

      //////////////////////
      // const webcamElement = document.getElementById('webcam');
      // const canvasElement = document.getElementById('canvas');
      // const snapSoundElement = document.getElementById('snapSound');
      // this.webcam = new Webcam(webcamElement, 'user', canvasElement, snapSoundElement);
      openNav();
      // this.webcam.start()
      //   .then(result => console.log("webcam started"))
      //   .catch(err => console.log(err)); 
      
    } else {
      if (this.webcam != null) {
        let videoElem = this.webcam.video;
        const stream = videoElem.srcObject;
  const tracks = stream.getTracks();

  tracks.forEach(function(track) {
    track.stop();
  });

  videoElem.srcObject = null;

        this.webcam = null;
        console.log("webcam stopped")
      }
    }
  }

  render() {
    let imagePreview = null;
    if (this.state.picture != null) {
      imagePreview = (
        <div>
        <div>
          <img width={this.frameWidth} height="304px" src={this.state.picture}></img>
        </div>
        <div>
          <button class="btn" onClick={this.uploadPicture} style={{color: "white"}}>Upload</button>
        </div>
        
      </div>
      )
    }

    let camera = null;

    if (this.state.displayCamera) {
      camera = (
        <div id="myNav" class="overlay">
          <a href="javascript:void(0)" class="closebtn" onClick={this.toggleCamera}>&times;</a>

          <div class="overlay-content d-flex flex-wrap justify-content-around">
            <div>
              <div>

              <video id="webcam" autoplay playsinline width={this.frameWidth} style={{display: "none"}}></video>
              <canvas id="canvas" width={this.frameWidth} height="304px"></canvas>
              <canvas id="canvasHidden" width={this.frameWidth} height="304px" class="d-none"></canvas>
              <audio id="snapSound" src="./snap.wav" preload = "auto"></audio> 
              </div>
              <button class="btn" onClick={this.takePicture} style={{color: "white"}}>Snap</button>
            </div>
            
            {imagePreview}

          </div>
        </div>
      )
    }
    return (
      <React.Fragment>
        <button type="button" class="btn" id="btn-camera" onClick={this.toggleCamera}><i class="fa fa-camera" aria-hidden="true"></i> Turn camera on</button>
        {camera}
      </React.Fragment>
    );
  }
  
}



ReactDOM.render(<CameraApp />, document.getElementById("camera"));

// // add event listener to request camera permission and open camera
// document.getElementById("btn-camera").onclick = function() {

// };

/* Open when someone clicks on the span element */
function openNav() {
  document.getElementById("myNav").style.width = "100%";
}


class ToggleButton extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      on: false
    };
    this.toggleState = this.toggleState.bind(this);
  }
  
  toggleState() {
    this.setState(prevState => {
      return {on: !prevState.on}
    });
  }

  render() {
    let color = {};
    if (this.state.on) {
      color["background-color"] = this.props.color;
    } else {
      color["background-color"] = "#FFFFFF";
    }
    return <button type="button" class="btn" style={color} onClick={this.toggleState} id={this.props.id}>{this.props.html}</button>
  }
}
  
class HomeControls extends React.Component {
  constructor(props) {
    super(props);
    this.equipment = {
      door: {
        html: <div><i class="fas fa-door-open"></i> Door</div>,
        id: "btn-door",
        color: "#18A0FB"
      },
      lights: {
        html: <div><i class="fas fa-sun"></i> Lights</div>,
        id: "btn-lights",
        color: "#FF6D43"
      },
      fan: {
        html: <div><i class="fas fa-fan"></i> Fan</div>,
        id: "btn-fan",
        color: "#4CAF50"
      },
    };

    // this.state = {
    //   door: false,
    //   lights: false,
    //   fan: false
    // }
    this.toggleState = this.toggleState.bind(this);
  }

  toggleState(){
    this.setState()
  }

  render() {
    return (
      <React.Fragment>
          <ToggleButton {...this.equipment.door} />
          <ToggleButton {...this.equipment.lights} />
          <ToggleButton {...this.equipment.fan} />
      </React.Fragment>
    )
  }
}

ReactDOM.render(<HomeControls />, document.getElementById("home-controls"))

