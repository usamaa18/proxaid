
class Camera extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      displayCamera: false,
      picture: null

    };

    this.frameWidth = "540";
    // change this
    this.postUrl = "http://ptsv2.com/t/0sbyl-1610863008/post";

    this.webcam = null;
    this.toggleCamera = this.toggleCamera.bind(this);
    this.takePicture = this.takePicture.bind(this);
    this.uploadPicture = this.uploadPicture.bind(this);
  }
  toggleCamera() {
    this.setState(prevState => {
      return {
        displayCamera: !prevState.displayCamera,
        picture: null
        }
    })
  }

  takePicture() {
    console.log("Size of image: " + this.webcam.snap().length/1000 + " KB");
    this.setState({picture: this.webcam.snap()}, () => console.log(this.state.picture));

  }

  uploadPicture() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", this.postUrl, true);
    // maybe change content-type to image/png
    xhr.setRequestHeader('Content-Type', 'text/plain');
    const componentRef = this;
    xhr.onreadystatechange = function() {
      if(xhr.readyState === XMLHttpRequest.DONE) {
        var status = xhr.status;
        if (status === 0 || (status >= 200 && status < 400)) {
          // The request has been completed successfully
          console.log("upload complete");
          
          // optional
          window.alert("Upload Sucessful");
          componentRef.toggleCamera();
        } else {
          console.log("POST error: " + status);
          // Oh no! There has been an error with the request!
        }
      }
    };
    xhr.send(this.state.picture);
  }

  componentDidUpdate () {
    if (this.state.displayCamera) {
      const webcamElement = document.getElementById('webcam');
      const canvasElement = document.getElementById('canvas');
      const snapSoundElement = document.getElementById('snapSound');
      this.webcam = new Webcam(webcamElement, 'user', canvasElement, snapSoundElement);
      openNav();
      this.webcam.start()
        .then(result => console.log("webcam started"))
        .catch(err => console.log(err)); 
      
    } else {
      if (this.webcam != null) {
        this.webcam.stop();
        this.webcam = null;
        console.log("webcam stopped")
      }
    }
  }

  render() {
    let imagePreview = null;
    if (this.state.picture != null) {
      imagePreview = (
        <div>
        <div>
          <img width={this.frameWidth} src={this.state.picture}></img>
        </div>
        <div>
          <button class="btn" onClick={this.uploadPicture} style={{color: "white"}}>Upload</button>
        </div>
        
      </div>
      )
    }

    let camera = null;

    if (this.state.displayCamera) {
      camera = (
        <div id="myNav" class="overlay">
          <a href="javascript:void(0)" class="closebtn" onClick={this.toggleCamera}>&times;</a>

          <div class="overlay-content d-flex justify-content-around">
            <div>
              <div>

              <video id="webcam" autoplay playsinline width={this.frameWidth}></video>
              <canvas id="canvas" class="d-none"></canvas>
              <audio id="snapSound" src="./snap.wav" preload = "auto"></audio> 
              </div>
              <button class="btn" onClick={this.takePicture} style={{color: "white"}}>Snap</button>
            </div>
            
            {imagePreview}

          </div>
        </div>
      )
    }
    return (
      <React.Fragment>
        <button type="button" class="btn" id="btn-camera" onClick={this.toggleCamera}><i class="fa fa-camera" aria-hidden="true"></i> Turn camera on</button>
        {camera}
      </React.Fragment>
    );
  }
  
}



ReactDOM.render(<Camera />, document.getElementById("camera"));

// // add event listener to request camera permission and open camera
// document.getElementById("btn-camera").onclick = function() {

// };

/* Open when someone clicks on the span element */
function openNav() {
  document.getElementById("myNav").style.width = "100%";
}


